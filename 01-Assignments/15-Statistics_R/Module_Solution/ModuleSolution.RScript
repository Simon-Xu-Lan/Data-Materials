# 15.2.1 Fundamentals of R Programming

# Create a named value x and assign it a value of 3
x <- 3

# Make a list of numbers from 0 to 9
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)

# 15.2.3 Read and Write Using R

# Look up documentation on read.csv()
?read.csv()

# Use read.csv to read in the demo file to the R environment
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)

# Look up the documentation on the fromJSON() library
?fromJSON()

# Use fromJSON() to read in the used car data
demo_table2 <- fromJSON(txt='demo.json')

# 15.2.4 Select Data in R

# To select the third value in a numeric vector `x` with 10 values
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]

# Select the third row of the Year column using bracket notation
demo_table[3,"Year"]

# Alternate method
demo_table[3,3]

# Select the vector of vehicle classes from `demo_table`
demo_table$"Vehicle_Class"

# Use bracket notation to select a single value
demo_table$"Vehicle_Class"[2]

# Filter the `demo_table2` to show only rows where vehicle price is greater than $10k
filter_table <- demo_table2[demo_table2$price 10000,]

# Look up the documentation for subset()
?subset()

# Create a filtered dataset using `demo_table2` where price > 10000, drive == 4wd, and "clean" %in% title_status
# Filter by price and drivetrain
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) 
# Create the same table more simply with subset()
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]

# Look up the documentation for sample()
?sample()

# Sample a large vector and create a smaller vector
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)

# Capture the number of rows in demo_table in a variable
num_rows <- 1:nrow(demo_table)

# Sample 3 of those rows
sample_rows <- sample(num_rows, 3)

# Retrieve requested data within the `demo_table`
demo_table[sample_rows,]

# Combine the previous 3 steps into one
demo_table[sample(1:nrow(demo_table), 3),]

# 15.2.5 Transform, Group, and Reshape Data Using the Tidyverse Package

# Examine the mutate() documentation
> library(tidyverse)
> ?mutate()

# Add a column for the mileage per year in `demo_table` and label all vehicles as active
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) # Add columns to original data frame

# Group used car data by vehicle and avg mile per condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') # Create summary table

# Add the max price for each condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') # Create summary table with multiple columns

# Examine the gather() documentation
?gather()

# Load the demo2.csv data
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)

# Use gather() to change to long format
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)

# Alternate method
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)

# Examine the spread() documentation
?spread()

# Return dataframe to original format using spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")

# 15.3.1 Introduction to ggplot2

# Examine the ggplot() documentation
?ggplot()

# 15.3.2 Build a Bar Plot in ggplot2

# Create a bar plot to show distribution of vehicle classes from the mpg dataset:
# Import dataset into ggplot2
plt <- ggplot(mpg,aes(x=class))
# Plot a bar plot
plt + geom_bar() 

# Examine the geom_bar() documentation
?geom_bar()

# Compare the number of vehicles from each manufacturer in the dataset:
# Create summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') 
# Import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) 
# Plot a bar plot
plt + geom_col() 

# 15.3.3 Add Formatting Functions

# Format the bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") 

# Plot a boxplot with labels and rotate the x-axis label 45 degrees
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + 
theme(axis.text.x=element_text(angle=45,hjust=1)) 

# 15.3.4 Build a Line Plot in ggplot2

# Compare Toyota's average highway fuel economy as a function of the different cylinder sizes:
# Create summary table
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') 
# Import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) 
# Generate the line plot
plt + geom_line()

# Adjust the x-axis and y-axis tick values
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) 

# Create scatter plot to show size of engine versus city fuel efficiency:
# Import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty))
# Add scatter plot with labels
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") 

# 15.3.5 Create Advanced Boxplots in ggplot2

# Create the same plot while grouping variables of interest:
# Import dataset into ggplot2 
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) 
# Add scatter plot with labels
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") 

# Create while adding more information:
# Import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) 
# Add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") 


# 15.3.5 Create Advanced Boxplots in ggplot2

# Generate boxplot to visualize the fuel efficiency for mpg dataset:
# Import dataset into ggplot2
plt <- ggplot(mpg,aes(y=hwy)) 
# Add boxplot
plt + geom_boxplot() 

# Generate set of boxplots to compare fuel efficiency for each manufacturer:
# Import dataset into ggplot2
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) 
# Add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) 

# 15.3.6 Create Heatmap Plots

# Visualize average highway fuel efficiency across vehicle class from 1999 to 2008:
# Create summary table
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') 
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
# Create heatmap with labels
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") 

# Visualize difference in fuel efficiency across vehicle models from 1999 to 2008:
# Create summary table
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') 
# Import dataset into ggplot2
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) 
# Add heatmap with labels and rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + 
    theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) 

# 15.3.7 Add Layers to Plots

# Using previous boxplot example, add data points with geom_point()
# Import dataset into ggplot2, add boxplot, and rotate x-axis labels 45 degrees with overlay scatter plot on top
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) 
plt + geom_boxplot() + 
    theme(axis.text.x=element_text(angle=45,hjust=1)) + 
    geom_point() 

# Compare avg engine size for each vehicle class:
# Create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') 
# Import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) 
# Add scatter plot
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") 

# Add more context around standard deviation:
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
# Import dataset into ggplot2 
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) 
# Add scatter plot with labels and overlay with error bars:
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + 
    geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) 

# View city and hwy fuel effiency in long format:
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) 
head(mpg_long)

# Visualize different fuel effiency ratings by manufacturer:
# Import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) 
# Add boxplot with labels rotated 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) 

# Examine the facet_wrap() documentation
?facet_wrap()

# Facet the previous example with vars() and facet_wrap()
# Import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) 
# Create multiple boxplots, one for each MPG type and rotate x-axis labels
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + 
    theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") 

# 15.4.4 Test for Normality

# Test the distribution of vehicle weights from the built-in mtcars dataset
ggplot(mtcars,aes(x=wt)) + geom_density() 

# Examine the shapiro.test() documentation
?shapiro.test()

# Perform a quantitative Shapiro-Wilk test on our previous example
shapiro.test(mtcars$wt)

# 15.6.1 Sample Versus Population Dataset
# Examine the sample_n() documentation
?sample_n()

# Visualize the distribution of driven miles for our entire population dataset:
# Import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) 
# Import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) 
# Visualize distribution using density plot
plt + geom_density() 

# Create a sample dataset using dplyr's sample_n():
# Randomly sample 50 data points
sample_table <- population_table %>% sample_n(50) 
# Import dataset into ggplot2
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) 
# Visualize distribution using density plot
plt + geom_density() 

# 15.6.2 Use the One-Sample t-Test

# Examine the t.test() documentation
?t.test()

# Compare sample versus population means
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) 

# 15.6.3 Use the Two-Sample t-Test

# Generate 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50) 
# Generate another 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) 

# Compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) 

# 15.6.4 Use the Two-Sample t-Test to Compare Samples

# Generate our two data samples:
# Import dataset
mpg_data <- read.csv('mpg_modified.csv') 
# Select only data points where the year is 1999
mpg_1999 <- mpg_data %>% filter(year==1999) 
# Select only data points where the year is 2008
mpg_2008 <- mpg_data %>% filter(year==2008) 

# Compare the mean difference between two samples
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) 

# 15.6.5 Use the ANOVA Test

# Examine the aov() documentation
?aov()

# Filter columns from mtcars dataset
mtcars_filt <- mtcars[,c("hp","cyl")] 
# Convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl) 

# Compare means across multiple levels
aov(hp ~ cyl,data=mtcars_filt) 

# Retrieve p-values
summary(aov(hp ~ cyl,data=mtcars_filt))

# 15.7.1 The Correlation Conundrum

# Preview the mtcars dataset
head(mtcars)

# Plot our two variables using the geom_point()
# Import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) 
# Create scatter plot
plt + geom_point() 

# Calculate correlation coefficient
cor(mtcars$hp,mtcars$qsec) 

# Read in cars dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) 
head(used_cars)

# Plot our two variables using the geom_point()
# Import dataset into ggplot2
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) 
# Create a scatter plot
plt + geom_point() 

# Calculate correlation coefficient
cor(used_cars$Miles_Driven,used_cars$Selling_Price) 

# Convert data frame into numeric matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) 
cor(used_matrix)

# 15.7.2 Return to Linear Regression

# Examine the lm() documentation
?lm()

lm(qsec ~ hp,mtcars) # Create linear model

# Summarize linear model
summary(lm(qsec~hp,mtcars)) 

# Create linear model
model <- lm(qsec ~ hp,mtcars)

# Determine y-axis values from linear model
yvals <- model$coefficients['hp']*mtcars$hp +
    model$coefficients['(Intercept)'] 
# Import dataset into ggplot2 and plot scatter and linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) 
plt + geom_point() + geom_line(aes(y=yvals), color = "red") 

# 15.7.3 Perform Multiple Linear Regression

# Generate multiple linear regression model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) 

# Generate summary statistics
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) 

# 15.8.1 Category Complexities

# Examine the chisq.test() documentation
?chisq.test()

# Generate contingency table
table(mpg$class,mpg$year) 

# Generate contingency table
tbl <- table(mpg$class,mpg$year) 

# Compare categorical distributions
chisq.test(tbl) 